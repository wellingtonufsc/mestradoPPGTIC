{"version":3,"sources":["components/IotaListener.js","App.js","index.js"],"names":["Iota","require","Converter","iota","composeAPI","provider","query","addresses","tags","IotaListener","state","hashs","messages","getIotaMessages","findTransactionObjects","then","transactions","map","transaction","msg","trytesToAscii","signatureMessageFragment","replace","setState","prevState","hash","catch","err","console","log","this","interval","setInterval","clearInterval","value","index","key","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"sNAIMA,G,MAAOC,EAAQ,IACfC,EAAYD,EAAQ,GAEpBE,EAAOH,EAAKI,WAAW,CAC1BC,SAAU,sCAMPC,EAAQ,CACVC,UAAW,CAJO,8FAKlBC,KAAM,CAJE,uBAqDGC,E,2MA5CXC,MAAQ,CACJC,MAAO,GACPC,SAAU,I,EAWdC,gBAAkB,WAEdV,EAAKW,uBAAuBR,GACvBS,MAAK,SAAAC,GACFA,EAAaC,KAAI,SAAAC,GACb,IAAMC,EAAMjB,EAAUkB,cAAcF,EAAYG,yBAAyBC,QAAQ,MAAO,KAExF,EAAKC,UAAS,SAAAC,GAAS,MAAK,CACxBZ,SAAS,GAAD,mBAAMY,EAAUZ,UAAhB,CAA0BO,IAClCR,MAAM,GAAD,mBAAMa,EAAUb,OAAhB,CAAuBO,EAAYO,iBAInDC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,O,mFArBpBG,KAAKC,SAAWC,YAAYF,KAAKjB,kBAAmB,O,6CAIpDoB,cAAcH,KAAKC,Y,+BAqBd,IAAD,OAEJ,OACI,4BACKD,KAAKpB,MAAME,SAASK,KAAI,SAACiB,EAAOC,GAAR,OAErB,wBAAIC,IAAK,EAAK1B,MAAMC,MAAMwB,IAA1B,IAAoCD,EAApC,a,GAvCOG,IAAMC,WCTlBC,MANf,WACE,OACE,kBAAC,EAAD,OCDJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.965a2a98.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './IotaListener.css';\r\n\r\nconst Iota = require('@iota/core');\r\nconst Converter = require('@iota/converter');\r\n\r\nconst iota = Iota.composeAPI({\r\n   provider: 'https://nodes.devnet.iota.org:443'\r\n});\r\n\r\nconst listenAddress = 'XVFJNZOZXGYWR9HFYG9WCJTLZ9HUZOPVAIIYIQNNYVVXG9VQQMKDCSIRIRQVXPBEVE99SAWGFJAWCLSHCTNONGQWDW'\r\nconst tag = 'HAMILTONTCCMESSAGE';\r\n\r\nconst query = {\r\n    addresses: [listenAddress],\r\n    tags: [tag]\r\n}\r\n\r\nclass IotaListener extends React.Component {\r\n\r\n    state = {\r\n        hashs: [],\r\n        messages: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(this.getIotaMessages(), 60000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    getIotaMessages = () => {\r\n\r\n        iota.findTransactionObjects(query)\r\n            .then(transactions => {\r\n                transactions.map(transaction => {\r\n                    const msg = Converter.trytesToAscii(transaction.signatureMessageFragment.replace(/9*$/, ''));\r\n\r\n                    this.setState(prevState => ({\r\n                        messages: [...prevState.messages, msg],\r\n                        hashs: [...prevState.hashs, transaction.hash]\r\n                      }))\r\n                })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    render(){\r\n\r\n        return (\r\n            <ul>\r\n                {this.state.messages.map((value, index) => (\r\n                    \r\n                    <li key={this.state.hashs[index]}> {value} </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default IotaListener;","import React from 'react';\n\nimport IotaListener from './components/IotaListener';\n\nfunction App() {\n  return (\n    <IotaListener />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}